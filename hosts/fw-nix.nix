# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, pkgs-unstable, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
      ./disk-config.nix
      ./configuration.nix
      ../home-manager/mike.nix
    ];

  disko.devices.disk.main.device = "/dev/nvme0n1";

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Enable VM copy/paste
  services.spice-vdagentd.enable = true;
  services.qemuGuest.enable = true;

  # Enable Virtual Machines
  virtualisation.libvirtd.enable = true;
  programs.virt-manager.enable = true;

  networking.hostName = "fw-nix"; # Define your hostname.
  networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.

  networking.firewall = {
   checkReversePath = false;
   # if packets are still dropped, they will show up in dmesg
   logReversePathDrops = true;
  };

  boot.initrd.availableKernelModules = [ "xhci_hcd" "thunderbolt" "nvme" "usb_storage" "uas" "sd_mod" "uhci_hcd" "ehci_pci" "ahci" "virtio_pci" "virtio_scsi" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s18.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.enableRedistributableFirmware = true;

  nixpkgs.config.packageOverrides = pkgs: {
    intel-vaapi-driver = pkgs.intel-vaapi-driver.override { enableHybridCodec = true; };
  };
  hardware.opengl = { # hardware.graphics on unstable
    enable = true;
    extraPackages = with pkgs; [
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      intel-vaapi-driver # LIBVA_DRIVER_NAME=i965 (older but works better for Firefox/Chromium)
      libvdpau-va-gl
    ];
  };
  environment.sessionVariables = { LIBVA_DRIVER_NAME = "iHD"; }; # Force intel-media-driver

  services.printing.enable = true;
    services.avahi = {
    enable = true;
    nssmdns4 = true;
    openFirewall = true;
  };

  musnix.enable = true;
  musnix.alsaSeq.enable = false;
  musnix.kernel.realtime = false;

  services = {
    teamviewer.enable = true;
    syncthing = {
      enable = true;
      user = "mike";
      dataDir = "/home/mike";
      configDir = "/home/mike/.config/syncthing";
      overrideDevices = true;     # overrides any devices added or deleted through the WebUI
      overrideFolders = true;     # overrides any folders added or deleted through the WebUI
      settings = {
        devices = {
          "ubuntuNUC" = { id = "AKRVT7K-PNJQP4N-7JIY7QJ-MP7HMUU-QHEP37X-OO7L52G-EGGNMBH-L5NXDAR"; };
        };
        folders = {
          "default" = {         # Name of folder in Syncthing, also the folder ID
            path = "/home/mike/Sync";    # Which folder to add to Syncthing
            devices = [ "ubuntuNUC" ];      # Which devices to share the folder with
          };
          "mikes-documents" = {         # Name of folder in Syncthing, also the folder ID
            path = "/home/mike/Documents";    # Which folder to add to Syncthing
            devices = [ "ubuntuNUC" ];      # Which devices to share the folder with
          };
        };
      };
    };
  };
  # Syncthing ports: 8384 for remote access to GUI
  # 22000 TCP and/or UDP for sync traffic
  # 21027/UDP for discovery
  # source: https://docs.syncthing.net/users/firewall.html
  networking.firewall.allowedTCPPorts = [ 22000 ];
  networking.firewall.allowedUDPPorts = [ 22000 21027 ];

  # Fix fingerprint functionality
  security.pam.services.login.fprintAuth = false;
  # similarly to how other distributions handle the fingerprinting login
  security.pam.services.gdm-fingerprint = lib.mkIf (config.services.fprintd.enable) {
    text = ''
      auth       required                    pam_shells.so
      auth       requisite                   pam_nologin.so
      auth       requisite                   pam_faillock.so      preauth
      auth       required                    ${pkgs.fprintd}/lib/security/pam_fprintd.so
      auth       optional                    pam_permit.so
      auth       required                    pam_env.so
      auth       [success=ok default=1]      ${pkgs.gnome.gdm}/lib/security/pam_gdm.so
      auth       optional                    ${pkgs.gnome.gnome-keyring}/lib/security/pam_gnome_keyring.so

      account    include                     login

      password   required                    pam_deny.so

      session    include                     login
      session    optional                    ${pkgs.gnome.gnome-keyring}/lib/security/pam_gnome_keyring.so auto_start
    '';
  };

}
